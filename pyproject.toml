[build-system]
requires = ["poetry-core>=1.9.0", "setuptools", "wheel"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "medicore"
version = "0.1.0"
description = "A Hospital Management System for Big hospital and clinic"
authors = ["Medicore Technologies, LLC <support@medicore.tech>"]
license = "MIT License"
readme = "README.md"
repository = "https://github.com/jajjage/MediCore.git"

classifiers = [
    "Environment :: Web Environment",
    "Framework :: Django",
    "Framework :: Django :: 4.2",
    "Framework :: Django :: 5.0",
    "Intended Audience :: HealthCare",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Internet :: WWW/HTTP",
    "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
]

[tool.poetry.dependencies]
python = "^3.11.1"
Django = "5.1.4"
django-tenants = "3.7.0"
djoser = "2.3.1"
djangorestframework = "3.15.2"
django-cors-headers = "4.6.0"
requests = "2.32.3"
python-dateutil = "2.9.0.post0"
django-model-utils = "5.0.0"
psycopg2-binary = "2.9.10"
django-redis = "5.4.0"
redis = "5.2.1"
celery = "5.4.0"
sentry-sdk = "2.19.2"
python-decouple = "^3.6"
drf-spectacular = "0.28.0"
django-environ =  "0.11.2"
django-rest-framework-nested = "0.0.1"
django-extensions = "3.1.3"
django-filter = "2.4.0"
django-rest-knox = "4.1.0"
cryptography = "^44.0.0"
django-simple-history = "^3.7.0"


[tool.poetry.group.test.dependencies]
# Type Checking
mypy = "1.10.1"
django-stubs = { version = "5.0.2", extras = ["compatible-mypy"] }

# Code Quality
nitpick = ">=0.32,<0.36"
safety = ">=2.2,<4.0"
black = ">=22.8,<25.0"
ruff = ">=0.5.0,<0.9.0"
rstfmt = "0.0.14"

# Testing Utilities
pytest = ">=7.2.2,<9.0.0"
pytest-cov = ">=4,<6"
pytest-randomly = "^3.12"
pytest-django = "^4.5.2"
pytest-deadfixtures = "^2.2.1"
pytest-testmon = ">=1.3.3,<3.0.0"
pytest-timeout = "^2.1.0"
hypothesis = { version = "^6.55.0", extras = ["django", "pytest", "pytz"] }

[tool.poetry.group.docs]
optional = true

[tool.poetry.group.docs.dependencies]
m2r2 = "^0.3"
psycopg2-binary = "^2.9.6"
tomli = "^2.0.1"
doc8 = ">=0.11,<1.2"

[tool.black]
target-version = ['py38', 'py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'

[tool.doc8]
max-line-length = 88

[tool.ruff]
line-length = 88
target-version = "py37"

[tool.ruff.lint]
select = ["ALL"]
ignore = [
    "ANN",      # Type hints related, let mypy handle these
    "COM812",   # "Trailing comma missing". If black is happy, I'm happy
    "D1",       # Docstrings related
    "E501",     # "Line too long". If black is happy, I'm happy
    "EM101",    # "Exception must not use a string literal, assign to variable first"
    "EM102",    # "Exception must not use an f-string literal, assign to variable first"
    "PTH",      # Use Pathlib stuff over os.*. Should migrate to Pathlib at some point
    "RET504",   # "Unnecessary variable assignment before `return` statement"
    "S101",     # "Use of `assert` detected"
    "SIM108",   # "Use ternary operator ...". Ternary is harmful for readability in some cases
    "TRY003",   # "Avoid specifying long messages outside the exception class"
    "D213",     # "Multi-line docstring summary should start at the second line"
    "D212",     # "Multi-line docstring summary should start at the first line"
    "D203",     # "1 blank line required before class docstring"
    "D200",     # "One-line docstring should fit on one line with quotes"
    "ISC001",   # "Use of `is` detected in a boolean context"
    "RUF012",   # "Use of `assert` detected"
    "TRY401",   # "Avoid using `assert` in `try` block"
    "ARG002",   # "Avoid using mutable default arguments"
    "TRY301",   # "Avoid using `assert` in `try` block"
    "SLF001",   # "Avoid using `self` in method signature"
    "DJ008",    # "Avoid using `assert` in `try` block" 
    "DJ001",    # "Avoid using `assert` in `try` block"
    "T201",     # "Print i would activate it later {print}"
    "G004",     #JKFJKF
    "RET506",   #
    "TRY300",   #
    "B904",     # 
    "DTZ007",   # Date time zone
    "N806",     # Variable in function should be lowercase
    "ARG001",   #
]

[tool.ruff.lint.per-file-ignores]
"**/migrations/*" = ["RUF012"]
"docs/conf.py" = ["INP001"]